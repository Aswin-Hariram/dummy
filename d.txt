// pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.1.0</version>
        <relativePath/>
    </parent>
    
    <groupId>com.examly</groupId>
    <artifactId>springapp</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>parking-booking-system</name>
    
    <properties>
        <java.version>17</java.version>
    </properties>
    
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>

// src/main/java/com/examly/springapp/SpringappApplication.java
package com.examly.springapp;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SpringappApplication {
    public static void main(String[] args) {
        SpringApplication.run(SpringappApplication.class, args);
    }
}

// src/main/java/com/examly/springapp/model/ParkingSlot.java
package com.examly.springapp.model;

import jakarta.persistence.*;

@Entity
@Table(name = "parking_slots")
public class ParkingSlot {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(unique = true, nullable = false)
    private String slotNumber;
    
    @Column(nullable = false)
    private String slotType;
    
    @Column(nullable = false)
    private Boolean isAvailable;
    
    @Column(nullable = false)
    private Double hourlyRate;
    
    // Constructors
    public ParkingSlot() {}
    
    public ParkingSlot(Long id, String slotNumber, String slotType, Boolean isAvailable, Double hourlyRate) {
        this.id = id;
        this.slotNumber = slotNumber;
        this.slotType = slotType;
        this.isAvailable = isAvailable;
        this.hourlyRate = hourlyRate;
    }
    
    // Getters and Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    
    public String getSlotNumber() { return slotNumber; }
    public void setSlotNumber(String slotNumber) { this.slotNumber = slotNumber; }
    
    public String getSlotType() { return slotType; }
    public void setSlotType(String slotType) { this.slotType = slotType; }
    
    public Boolean getIsAvailable() { return isAvailable; }
    public void setIsAvailable(Boolean isAvailable) { this.isAvailable = isAvailable; }
    
    public Double getHourlyRate() { return hourlyRate; }
    public void setHourlyRate(Double hourlyRate) { this.hourlyRate = hourlyRate; }
}

// src/main/java/com/examly/springapp/model/Booking.java
package com.examly.springapp.model;

import jakarta.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "bookings")
public class Booking {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(nullable = false)
    private Long userId;
    
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "slot_id", nullable = false)
    private ParkingSlot slot;
    
    @Column(nullable = false)
    private String vehicleNumber;
    
    @Column(nullable = false)
    private LocalDateTime startTime;
    
    @Column(nullable = false)
    private LocalDateTime endTime;
    
    private Double totalCost;
    
    private String status;
    
    // Constructors
    public Booking() {}
    
    public Booking(Long id, Long userId, ParkingSlot slot, String vehicleNumber, 
                   LocalDateTime startTime, LocalDateTime endTime, Double totalCost, String status) {
        this.id = id;
        this.userId = userId;
        this.slot = slot;
        this.vehicleNumber = vehicleNumber;
        this.startTime = startTime;
        this.endTime = endTime;
        this.totalCost = totalCost;
        this.status = status;
    }
    
    // Getters and Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    
    public Long getUserId() { return userId; }
    public void setUserId(Long userId) { this.userId = userId; }
    
    public ParkingSlot getSlot() { return slot; }
    public void setSlot(ParkingSlot slot) { this.slot = slot; }
    
    public String getVehicleNumber() { return vehicleNumber; }
    public void setVehicleNumber(String vehicleNumber) { this.vehicleNumber = vehicleNumber; }
    
    public LocalDateTime getStartTime() { return startTime; }
    public void setStartTime(LocalDateTime startTime) { this.startTime = startTime; }
    
    public LocalDateTime getEndTime() { return endTime; }
    public void setEndTime(LocalDateTime endTime) { this.endTime = endTime; }
    
    public Double getTotalCost() { return totalCost; }
    public void setTotalCost(Double totalCost) { this.totalCost = totalCost; }
    
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}

// src/main/java/com/examly/springapp/repository/ParkingSlotRepository.java
package com.examly.springapp.repository;

import com.examly.springapp.model.ParkingSlot;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.List;

@Repository
public interface ParkingSlotRepository extends JpaRepository<ParkingSlot, Long> {
    List<ParkingSlot> findByIsAvailable(Boolean isAvailable);
    ParkingSlot findBySlotNumber(String slotNumber);
}

// src/main/java/com/examly/springapp/repository/BookingRepository.java
package com.examly.springapp.repository;

import com.examly.springapp.model.Booking;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.List;

@Repository
public interface BookingRepository extends JpaRepository<Booking, Long> {
    List<Booking> findByUserId(Long userId);
    List<Booking> findByStatus(String status);
}

// src/main/java/com/examly/springapp/service/BookingService.java
package com.examly.springapp.service;

import com.examly.springapp.model.Booking;
import com.examly.springapp.model.ParkingSlot;
import com.examly.springapp.repository.BookingRepository;
import com.examly.springapp.repository.ParkingSlotRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.time.Duration;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Service
public class BookingService {
    
    @Autowired
    private BookingRepository bookingRepository;
    
    @Autowired
    private ParkingSlotRepository slotRepository;
    
    public Booking createBooking(Booking booking) {
        validateBooking(booking);
        
        // Calculate total cost
        Duration duration = Duration.between(booking.getStartTime(), booking.getEndTime());
        long hours = duration.toHours();
        if (duration.toMinutes() % 60 > 0) {
            hours++; // Round up for partial hours
        }
        double totalCost = hours * booking.getSlot().getHourlyRate();
        
        booking.setTotalCost(totalCost);
        booking.setStatus("Confirmed");
        
        // Mark slot as unavailable
        ParkingSlot slot = booking.getSlot();
        slot.setIsAvailable(false);
        slotRepository.save(slot);
        
        return bookingRepository.save(booking);
    }
    
    public List<Booking> getUserBookings(Long userId) {
        return bookingRepository.findByUserId(userId);
    }
    
    public List<Booking> getAllBookings() {
        return bookingRepository.findAll();
    }
    
    public Booking cancelBooking(Long bookingId) {
        Optional<Booking> optionalBooking = bookingRepository.findById(bookingId);
        if (optionalBooking.isEmpty()) {
            throw new RuntimeException("Booking not found");
        }
        
        Booking booking = optionalBooking.get();
        if ("Cancelled".equals(booking.getStatus())) {
            throw new RuntimeException("Booking is already cancelled");
        }
        
        booking.setStatus("Cancelled");
        
        // Make slot available again
        ParkingSlot slot = booking.getSlot();
        slot.setIsAvailable(true);
        slotRepository.save(slot);
        
        return bookingRepository.save(booking);
    }
    
    private void validateBooking(Booking booking) {
        if (booking.getSlot() == null || !booking.getSlot().getIsAvailable()) {
            throw new RuntimeException("Selected parking slot is not available");
        }
        
        if (booking.getVehicleNumber() == null || booking.getVehicleNumber().trim().isEmpty()) {
            throw new RuntimeException("Vehicle number is required");
        }
        
        if (booking.getStartTime() == null || booking.getEndTime() == null) {
            throw new RuntimeException("Start time and end time are required");
        }
        
        if (booking.getEndTime().isBefore(booking.getStartTime()) || 
            booking.getEndTime().isEqual(booking.getStartTime())) {
            throw new RuntimeException("End time must be after start time");
        }
        
        if (booking.getStartTime().isBefore(LocalDateTime.now())) {
            throw new RuntimeException("Start time cannot be in the past");
        }
    }
}

// src/main/java/com/examly/springapp/controller/BookingController.java
package com.examly.springapp.controller;

import com.examly.springapp.model.Booking;
import com.examly.springapp.service.BookingService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

@RestController
@RequestMapping("/api/bookings")
@CrossOrigin(origins = "*")
public class BookingController {
    
    @Autowired
    private BookingService bookingService;
    
    @PostMapping
    public ResponseEntity<Booking> createBooking(@RequestBody Booking booking) {
        try {
            Booking createdBooking = bookingService.createBooking(booking);
            return ResponseEntity.status(201).body(createdBooking);
        } catch (RuntimeException e) {
            Map<String, String> error = new HashMap<>();
            error.put("message", e.getMessage());
            return ResponseEntity.badRequest().body(null);
        }
    }
    
    @GetMapping("/user/{userId}")
    public ResponseEntity<List<Booking>> getUserBookings(@PathVariable Long userId) {
        List<Booking> bookings = bookingService.getUserBookings(userId);
        return ResponseEntity.ok(bookings);
    }
    
    @GetMapping
    public ResponseEntity<List<Booking>> getAllBookings() {
        List<Booking> bookings = bookingService.getAllBookings();
        return ResponseEntity.ok(bookings);
    }
    
    @PutMapping("/{bookingId}/cancel")
    public ResponseEntity<Booking> cancelBooking(@PathVariable Long bookingId) {
        try {
            Booking cancelledBooking = bookingService.cancelBooking(bookingId);
            return ResponseEntity.ok(cancelledBooking);
        } catch (RuntimeException e) {
            return ResponseEntity.badRequest().build();
        }
    }
}

// src/main/java/com/examly/springapp/service/ParkingSlotService.java
package com.examly.springapp.service;

import com.examly.springapp.model.ParkingSlot;
import com.examly.springapp.repository.ParkingSlotRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.Optional;

@Service
public class ParkingSlotService {
    
    @Autowired
    private ParkingSlotRepository slotRepository;
    
    public List<ParkingSlot> getAllSlots() {
        return slotRepository.findAll();
    }
    
    public List<ParkingSlot> getAvailableSlots() {
        return slotRepository.findByIsAvailable(true);
    }
    
    public ParkingSlot createSlot(ParkingSlot slot) {
        return slotRepository.save(slot);
    }
    
    public Optional<ParkingSlot> getSlotById(Long id) {
        return slotRepository.findById(id);
    }
    
    public ParkingSlot updateSlot(Long id, ParkingSlot slotDetails) {
        Optional<ParkingSlot> optionalSlot = slotRepository.findById(id);
        if (optionalSlot.isPresent()) {
            ParkingSlot slot = optionalSlot.get();
            slot.setSlotNumber(slotDetails.getSlotNumber());
            slot.setSlotType(slotDetails.getSlotType());
            slot.setIsAvailable(slotDetails.getIsAvailable());
            slot.setHourlyRate(slotDetails.getHourlyRate());
            return slotRepository.save(slot);
        }
        return null;
    }
    
    public boolean deleteSlot(Long id) {
        if (slotRepository.existsById(id)) {
            slotRepository.deleteById(id);
            return true;
        }
        return false;
    }
}

// src/main/java/com/examly/springapp/controller/ParkingSlotController.java
package com.examly.springapp.controller;

import com.examly.springapp.model.ParkingSlot;
import com.examly.springapp.service.ParkingSlotService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/slots")
@CrossOrigin(origins = "*")
public class ParkingSlotController {
    
    @Autowired
    private ParkingSlotService slotService;
    
    @GetMapping
    public ResponseEntity<List<ParkingSlot>> getAllSlots() {
        List<ParkingSlot> slots = slotService.getAllSlots();
        return ResponseEntity.ok(slots);
    }
    
    @GetMapping("/available")
    public ResponseEntity<List<ParkingSlot>> getAvailableSlots() {
        List<ParkingSlot> slots = slotService.getAvailableSlots();
        return ResponseEntity.ok(slots);
    }
    
    @GetMapping("/{id}")
    public ResponseEntity<ParkingSlot> getSlotById(@PathVariable Long id) {
        Optional<ParkingSlot> slot = slotService.getSlotById(id);
        return slot.map(ResponseEntity::ok).orElse(ResponseEntity.notFound().build());
    }
    
    @PostMapping
    public ResponseEntity<ParkingSlot> createSlot(@RequestBody ParkingSlot slot) {
        ParkingSlot createdSlot = slotService.createSlot(slot);
        return ResponseEntity.status(201).body(createdSlot);
    }
    
    @PutMapping("/{id}")
    public ResponseEntity<ParkingSlot> updateSlot(@PathVariable Long id, @RequestBody ParkingSlot slotDetails) {
        ParkingSlot updatedSlot = slotService.updateSlot(id, slotDetails);
        return updatedSlot != null ? ResponseEntity.ok(updatedSlot) : ResponseEntity.notFound().build();
    }
    
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteSlot(@PathVariable Long id) {
        boolean deleted = slotService.deleteSlot(id);
        return deleted ? ResponseEntity.noContent().build() : ResponseEntity.notFound().build();
    }
}

// src/main/resources/application.properties
spring.application.name=parking-booking-system
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true

// The test file you provided goes in:
// src/test/java/com/examly/springapp/controller/BookingControllerTest.java
