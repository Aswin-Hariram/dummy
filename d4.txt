// package.json
{
  "name": "parking-booking-frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.16.4",
    "@testing-library/react": "^13.3.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^0.27.2",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslistrc": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

// src/utils/api.js
import axios from 'axios';

const API_BASE_URL = 'http://localhost:8080/api';

const api = axios.create({
  baseURL: API_BASE_URL,
});

export const getAvailableSlots = async () => {
  const response = await api.get('/slots');
  return response.data;
};

export const createBooking = async (bookingData) => {
  const response = await api.post('/bookings', bookingData);
  return response.data;
};

export const getUserBookings = async (userId) => {
  const response = await api.get(`/bookings/user/${userId}`);
  return response.data;
};

export const cancelBooking = async (bookingId) => {
  const response = await api.put(`/bookings/${bookingId}/cancel`);
  return response.data;
};

// src/components/SlotList.js
import React, { useState, useEffect } from 'react';
import * as api from '../utils/api';

const SlotList = ({ onSelect, selectedSlot }) => {
  const [slots, setSlots] = useState([]);
  const [filteredSlots, setFilteredSlots] = useState([]);
  const [typeFilter, setTypeFilter] = useState('All');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadSlots();
  }, []);

  useEffect(() => {
    if (typeFilter === 'All') {
      setFilteredSlots(slots);
    } else {
      setFilteredSlots(slots.filter(slot => slot.slotType === typeFilter));
    }
  }, [slots, typeFilter]);

  const loadSlots = async () => {
    try {
      setLoading(true);
      setError('');
      const slotsData = await api.getAvailableSlots();
      setSlots(slotsData);
      setFilteredSlots(slotsData);
    } catch (err) {
      setError('Failed to load slots.');
    } finally {
      setLoading(false);
    }
  };

  const handleBookClick = (slot) => {
    onSelect(slot);
  };

  const handleFilterChange = (e) => {
    setTypeFilter(e.target.value);
  };

  if (loading) return <div>Loading slots...</div>;
  if (error) return <div>{error}</div>;

  return (
    <div className="slot-list">
      <h2>Available Parking Slots</h2>
      
      <div className="filter-section">
        <label htmlFor="type-filter">Filter by Type:</label>
        <select 
          id="type-filter"
          data-testid="type-filter"
          value={typeFilter} 
          onChange={handleFilterChange}
        >
          <option value="All">All</option>
          <option value="Regular">Regular</option>
          <option value="VIP">VIP</option>
          <option value="Handicapped">Handicapped</option>
        </select>
      </div>

      <div className="slots-grid">
        {filteredSlots.map(slot => (
          <div 
            key={slot.id} 
            className="slot-item"
            data-testid={`slot-item-${slot.slotNumber}`}
          >
            <h3>{slot.slotNumber}</h3>
            <p>Type: {slot.slotType}</p>
            <p>Rate: ${slot.hourlyRate}/hour</p>
            <p>Status: {slot.isAvailable ? 'Available' : 'Occupied'}</p>
            {slot.isAvailable && (
              <button 
                data-testid={`book-btn-${slot.slotNumber}`}
                onClick={() => handleBookClick(slot)}
                className="book-button"
              >
                Book
              </button>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

export default SlotList;

// src/components/BookingForm.js
import React, { useState, useEffect } from 'react';
import * as api from '../utils/api';

const BookingForm = ({ slot, onBooked }) => {
  const [vehicleNumber, setVehicleNumber] = useState('');
  const [startTime, setStartTime] = useState('');
  const [endTime, setEndTime] = useState('');
  const [cost, setCost] = useState(0);
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    calculateCost();
  }, [startTime, endTime, slot]);

  const calculateCost = () => {
    if (startTime && endTime && slot) {
      const start = new Date(startTime);
      const end = new Date(endTime);
      
      if (end > start) {
        const diffInMs = end - start;
        const diffInHours = diffInMs / (1000 * 60 * 60);
        const roundedHours = Math.ceil(diffInHours); // Round up partial hours
        const totalCost = roundedHours * slot.hourlyRate;
        setCost(totalCost);
      } else {
        setCost(0);
      }
    } else {
      setCost(0);
    }
  };

  const validateForm = () => {
    setError('');

    if (!vehicleNumber.trim()) {
      setError('Vehicle number is required.');
      return false;
    }

    if (!startTime || !endTime) {
      setError('Both start and end times are required.');
      return false;
    }

    const start = new Date(startTime);
    const end = new Date(endTime);
    const now = new Date();

    if (start < now) {
      setError('Start time cannot be in the past.');
      return false;
    }

    if (end <= start) {
      setError('Start time must be before end time.');
      return false;
    }

    return true;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) return;

    setLoading(true);
    setError('');

    try {
      const bookingData = {
        userId: 1, // Assuming user ID 1 for demo
        slot: slot,
        vehicleNumber: vehicleNumber.trim(),
        startTime: startTime,
        endTime: endTime
      };

      const result = await api.createBooking(bookingData);
      onBooked(result);
      
      // Reset form
      setVehicleNumber('');
      setStartTime('');
      setEndTime('');
      setCost(0);
      
    } catch (err) {
      const errorMessage = err.response?.data?.message || 'Failed to create booking.';
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  if (!slot) return null;

  return (
    <div className="booking-form">
      <h3>Book Slot {slot.slotNumber}</h3>
      <p>Type: {slot.slotType} | Rate: ${slot.hourlyRate}/hour</p>
      
      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label htmlFor="vehicle-input">Vehicle Number:</label>
          <input
            id="vehicle-input"
            data-testid="vehicle-input"
            type="text"
            value={vehicleNumber}
            onChange={(e) => setVehicleNumber(e.target.value)}
            placeholder="Enter vehicle number"
          />
        </div>

        <div className="form-group">
          <label htmlFor="start-time-input">Start Time:</label>
          <input
            id="start-time-input"
            data-testid="start-time-input"
            type="datetime-local"
            value={startTime}
            onChange={(e) => setStartTime(e.target.value)}
          />
        </div>

        <div className="form-group">
          <label htmlFor="end-time-input">End Time:</label>
          <input
            id="end-time-input"
            data-testid="end-time-input"
            type="datetime-local"
            value={endTime}
            onChange={(e) => setEndTime(e.target.value)}
          />
        </div>

        <div className="cost-display">
          <strong data-testid="cost">
            Total Cost: ${cost.toFixed(2)}
          </strong>
        </div>

        {error && (
          <div className="error-message" data-testid="form-error">
            {error}
          </div>
        )}

        <button 
          type="submit" 
          disabled={loading || cost === 0}
          data-testid="book-btn"
          className="submit-button"
        >
          {loading ? 'Booking...' : 'Book Slot'}
        </button>
      </form>
    </div>
  );
};

export default BookingForm;

// src/components/UserBookings.js
import React, { useState, useEffect } from 'react';
import * as api from '../utils/api';

const UserBookings = ({ userId }) => {
  const [bookings, setBookings] = useState([]);
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(true);
  const [cancelError, setCancelError] = useState('');

  useEffect(() => {
    loadBookings();
  }, [userId]);

  const loadBookings = async () => {
    try {
      setLoading(true);
      setError('');
      setCancelError('');
      const bookingsData = await api.getUserBookings(userId);
      
      // Sort bookings by start time (most recent first)
      const sortedBookings = bookingsData.sort((a, b) => 
        new Date(b.startTime) - new Date(a.startTime)
      );
      
      setBookings(sortedBookings);
    } catch (err) {
      setError('Failed to load bookings.');
    } finally {
      setLoading(false);
    }
  };

  const handleCancelBooking = async (bookingId) => {
    try {
      setCancelError('');
      await api.cancelBooking(bookingId);
      // Refresh bookings after successful cancellation
      await loadBookings();
    } catch (err) {
      const errorMessage = err.response?.data?.message || 'Failed to cancel booking.';
      setCancelError(errorMessage);
    }
  };

  const formatDateTime = (dateTimeString) => {
    return new Date(dateTimeString).toLocaleString();
  };

  if (loading) return <div>Loading bookings...</div>;
  if (error) return <div>{error}</div>;

  return (
    <div className="user-bookings">
      <h2>My Bookings</h2>
      
      {cancelError && (
        <div className="error-message">
          {cancelError}
        </div>
      )}

      {bookings.length === 0 ? (
        <p>No bookings found.</p>
      ) : (
        <div className="bookings-list">
          {bookings.map(booking => (
            <div 
              key={booking.id} 
              className="booking-item"
              data-testid={`booking-item-${booking.id}`}
            >
              <div className="booking-header">
                <h3>Slot {booking.parkingSlot.slotNumber}</h3>
                <span 
                  className={`status ${booking.status.toLowerCase()}`}
                  data-testid={`ub-status-${booking.id}`}
                >
                  {booking.status}
                </span>
              </div>
              
              <div className="booking-details">
                <p><strong>Vehicle:</strong> {booking.vehicleNumber}</p>
                <p><strong>Type:</strong> {booking.parkingSlot.slotType}</p>
                <p><strong>Start:</strong> {formatDateTime(booking.startTime)}</p>
                <p><strong>End:</strong> {formatDateTime(booking.endTime)}</p>
                <p><strong>Total Cost:</strong> ${booking.totalCost}</p>
              </div>

              {booking.status === 'Confirmed' && (
                <button
                  className="cancel-button"
                  data-testid={`cancel-btn-${booking.id}`}
                  onClick={() => handleCancelBooking(booking.id)}
                >
                  Cancel Booking
                </button>
              )}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default UserBookings;

// src/App.js
import React, { useState } from 'react';
import SlotList from './components/SlotList';
import BookingForm from './components/BookingForm';
import UserBookings from './components/UserBookings';
import './App.css';

function App() {
  const [selectedSlot, setSelectedSlot] = useState(null);
  const [activeTab, setActiveTab] = useState('slots');
  const [refreshBookings, setRefreshBookings] = useState(0);

  const handleSlotSelect = (slot) => {
    setSelectedSlot(slot);
    setActiveTab('book');
  };

  const handleBookingComplete = (booking) => {
    alert(`Booking confirmed! Booking ID: ${booking.id}`);
    setSelectedSlot(null);
    setActiveTab('bookings');
    setRefreshBookings(prev => prev + 1); // Trigger refresh
  };

  const handleTabChange = (tab) => {
    setActiveTab(tab);
    if (tab !== 'book') {
      setSelectedSlot(null);
    }
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>Parking Booking System</h1>
        <nav className="navigation">
          <button 
            className={activeTab === 'slots' ? 'active' : ''}
            onClick={() => handleTabChange('slots')}
          >
            Available Slots
          </button>
          <button 
            className={activeTab === 'bookings' ? 'active' : ''}
            onClick={() => handleTabChange('bookings')}
          >
            My Bookings
          </button>
        </nav>
      </header>

      <main className="App-main">
        {activeTab === 'slots' && (
          <SlotList 
            onSelect={handleSlotSelect} 
            selectedSlot={selectedSlot}
          />
        )}
        
        {activeTab === 'book' && (
          <BookingForm 
            slot={selectedSlot} 
            onBooked={handleBookingComplete}
          />
        )}
        
        {activeTab === 'bookings' && (
          <UserBookings 
            userId={1} 
            key={refreshBookings} // Force re-render when bookings change
          />
        )}
      </main>
    </div>
  );
}

export default App;

// src/App.css
.App {
  text-align: center;
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
  font-family: Arial, sans-serif;
}

.App-header {
  background-color: #282c34;
  padding: 20px;
  color: white;
  border-radius: 8px;
  margin-bottom: 20px;
}

.App-header h1 {
  margin: 0 0 20px 0;
}

.navigation {
  display: flex;
  gap: 10px;
  justify-content: center;
}

.navigation button {
  padding: 10px 20px;
  border: none;
  background-color: #61dafb;
  color: #282c34;
  cursor: pointer;
  border-radius: 5px;
  font-weight: bold;
}

.navigation button:hover {
  background-color: #21a1c4;
}

.navigation button.active {
  background-color: #ffffff;
  color: #282c34;
}

/* SlotList Styles */
.slot-list {
  text-align: left;
}

.filter-section {
  margin-bottom: 20px;
  padding: 15px;
  background-color: #f5f5f5;
  border-radius: 5px;
}

.filter-section label {
  margin-right: 10px;
  font-weight: bold;
}

.filter-section select {
  padding: 5px 10px;
  border: 1px solid #ddd;
  border-radius: 3px;
}

.slots-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 20px;
  margin-top: 20px;
}

.slot-item {
  border: 1px solid #ddd;
  padding: 15px;
  border-radius: 8px;
  background-color: #f9f9f9;
}

.slot-item h3 {
  margin: 0 0 10px 0;
  color: #282c34;
}

.slot-item p {
  margin: 5px 0;
  color: #666;
}

.book-button {
  background-color: #4CAF50;
  color: white;
  padding: 8px 16px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  margin-top: 10px;
}

.book-button:hover {
  background-color: #45a049;
}

/* BookingForm Styles */
.booking-form {
  max-width: 500px;
  margin: 0 auto;
  text-align: left;
  background-color: #f9f9f9;
  padding: 20px;
  border-radius: 8px;
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
}

.form-group input {
  width: 100%;
  padding: 8px 12px;
  border: 1px solid #ddd;
  border-radius: 4px;
  box-sizing: border-box;
}

.cost-display {
  margin: 15px 0;
  padding: 10px;
  background-color: #e7f3ff;
  border-radius: 4px;
  text-align: center;
}

.error-message {
  color: #d32f2f;
  background-color: #ffebee;
  padding: 10px;
  border-radius: 4px;
  margin: 10px 0;
  border: 1px solid #ffcdd2;
}

.submit-button {
  width: 100%;
  background-color: #2196F3;
  color: white;
  padding: 12px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
  font-weight: bold;
}

.submit-button:hover:not(:disabled) {
  background-color: #1976D2;
}

.submit-button:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}

/* UserBookings Styles */
.user-bookings {
  text-align: left;
}

.bookings-list {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.booking-item {
  border: 1px solid #ddd;
  padding: 15px;
  border-radius: 8px;
  background-color: #f9f9f9;
}

.booking-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 10px;
  border-bottom: 1px solid #eee;
  padding-bottom: 10px;
}

.booking-header h3 {
  margin: 0;
  color: #282c34;
}

.status {
  padding: 4px 8px;
  border-radius: 4px;
  font-weight: bold;
  text-transform: uppercase;
  font-size: 12px;
}

.status.confirmed {
  background-color: #c8e6c9;
  color: #2e7d32;
}

.status.cancelled {
  background-color: #ffcdd2;
  color: #c62828;
}

.booking-details p {
  margin: 5px 0;
  color: #666;
}

.cancel-button {
  background-color: #f44336;
  color: white;
  padding: 8px 16px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  margin-top: 10px;
}

.cancel-button:hover {
  background-color: #d32f2f;
}

/* src/index.js */
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

/* src/index.css */
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: #f5f5f5;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

* {
  box-sizing: border-box;
}

/* public/index.html */
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="Parking Booking System" />
    <title>Parking Booking System</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>

/* src/setupTests.js */
import '@testing-library/jest-dom';

/* Jest Configuration for package.json (already included above) */
